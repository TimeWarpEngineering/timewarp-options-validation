name: Build and Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true                     # Disable the .NET logo in the console output
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience to skip caching NuGet packages and speed up the build
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_AUTH_TOKEN: ${{ secrets.PUBLISH_TO_NUGET_ORG }}     # <-- This is the token for the GitHub account you want to use.

defaults:
  run:
    shell: pwsh

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Print Job Info
        run: |
          echo "🎉 Job triggered by a ${{ github.event_name }} event."
          echo "🐧 Running on a ${{ runner.os }} server hosted by GitHub."
          echo "🔎 Branch name: ${{ github.ref }}, repository: ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build TimeWarp.OptionsValidation
        run: |
          cd source/TimeWarp.OptionsValidation/
          dotnet build --configuration Debug

      - name: Publish TimeWarp.OptionsValidation
        run: |
          cd source/TimeWarp.OptionsValidation/bin/Packages
          dotnet nuget push *.nupkg --skip-duplicate --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.PUBLISH_TO_NUGET_ORG }}

      - name: Verify Directory.Build.props
        run: |
          if (Test-Path -Path "Directory.Build.props") {
            Get-Content -Path "Directory.Build.props"
          } else {
            Write-Error "Directory.Build.props not found at the expected path."
          }

      - name: Tag commit with version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          $version = (Select-String -Path "Directory.Build.props" -Pattern '<Version>(.*?)</Version>').Matches.Groups[1].Value
          git tag -a "$version" -m "Release $version"
          git push origin "$version"

      - name: Check if version is not a pre-release
        id: check_pre_release
        run: |
          $version = (Select-String -Path "Directory.Build.props" -Pattern '<Version>(.*?)</Version>').Matches.Groups[1].Value
          $isPreRelease = $version -match '-(alpha|beta)'
          echo "IsPreRelease=$isPreRelease"
          # Setting output that indicates whether it's a pre-release version
          echo "::set-output name=IS_PRE_RELEASE::$isPreRelease"

      - name: Generate Release Notes
        id: generate_release_notes
        uses: release-drafter/release-drafter@v5
        with:
          version: ${{ steps.tag_commit.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Release Notes to File
        if: steps.check_pre_release.outputs.IS_PRE_RELEASE == 'False'
        run: |
          $releaseNotes = "${{ steps.generate_release_notes.outputs.body }}"
          $filePath = "Documentation/ReleaseNotes/Release_${{ steps.tag_commit.outputs.VERSION }}.md"
          if (-not (Test-Path -Path "Documentation/ReleaseNotes")) {
            New-Item -ItemType Directory -Path "Documentation/ReleaseNotes" -Force
          }
          Set-Content -Path $filePath -Value $releaseNotes
          git add $filePath
          git commit -m "Add release notes for version ${{ steps.tag_commit.outputs.VERSION }}"
          git push origin master

      - name: Create GitHub Release
        if: steps.check_pre_release.outputs.IS_PRE_RELEASE == 'False'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_commit.outputs.VERSION }}
          release_name: Release ${{ steps.tag_commit.outputs.VERSION }}
          draft: true
          prerelease: false
          body: ${{ steps.generate_release_notes.outputs.body }}

      - name: Print Job Status
        run: |
          echo "🍏 Job status: ${{ job.status }}."
